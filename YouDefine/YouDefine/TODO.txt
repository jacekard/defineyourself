--------------------------

TODO LIST:

--------------------------

1. Create Model.Idea that corresponds to EF Core -->  DONE
	-> Create extra additional model as an API call result
	sth like IdeaResult that contains:
	title: string,
	lastModifiedDate: string (using formatDate extension method from DateTime class),
	definitions: []

2. Create Index View and simple input dialog for users


3. Choose Database and create CRUD Methods
   -> Test if ideas are adding
   -> in IdeasController create method which calculates when was the last update in day/month/year format
   -> API should return objects which are safe and easy to understand by javascript

4. Create Validation for user's input
   -> Swear Filtering
   -> Min and Max character length


5. Create Javascript and Styles responsible for input dialog
   -> typer effect
   -> random font colors when visiting
   -> styling caret
   -> Autocompletion by jQueryUI
   -> AJAX calls


6. Create Ideas View provided by DataBase source and backend using API
   Integrate p5.js with main page -> responsible for showing text as particles
   which can move and slightly rotate.
   
   -> user wants to search in database for particular idea and then:
   a) if there are already some: show it to them in IdeasView and option for adding new one
   b) if not: only options for adding new one with special alert that has been created
	  -> redirect to "Home"
   c) create method providing random idea from db in IdeasController.cs

7. Create Administration Panel
   -> Using Authentication and login/password authorization
   -> Create simple Admin View
   -> Option settings
	  -> enable/disable swearing filter
	  -> and more...


8. Create simple statistics with ChartFramework (probably in Python):
   -> how many ideas indices are in database
   -> how many characters in total description
   -> how often does user add ideas (history of adding)
   -> how many visitors on-site 
   {
		when user visits site, script is determining date and time
		and is saving entry to db
   }

9. Create mail alerting using Hangfire Framework for jobs!


10. Deploy web app with database and scripts


11. Learn about security issues in Web Application and try to implement some of them
	for better and more secure app.

--------------------------------------------